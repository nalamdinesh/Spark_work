import org.apache.spark.sql.SparkSession
import org.apache.spark.SparkConf
import org.apache.log4j._
 
object SparkHqlWrapper {
  def main(args: Array[String]): Unit  = {
 
    //log4j logger to write logs.
    val logger = Logger.getRootLogge
 
//Creation of Spark Context & Spark Session
    val conf = new SparkConf()
    val spark = SparkSession.builder()
      .config(conf)
      .config("hive.exec.dynamic.partition.mode", "nonstrict")
      .config("hive.exec.orc.default.buffer.size", "131072")
      .enableHiveSupport()
      .getOrCreate()
 
    val sc = spark.sparkContext
 
    
logger.info("Application Id is: " + sc.applicationId) 
    logger.warn("Application Id is: " + sc.applicationId)
 
    //Reading the job execution map into an Array.
 
    logger.info(" Reading the job plan from file: " + args(0))
    logger.warn(" Reading the job plan from file: " + args(0))
    val job_metadata = scala.io.Source.fromFile(args(0)).getLines().filter(!_.isEmpty).map(line => line.split(",").map(_.trim)).toArray
 
    //Reading the para file into a Map.
    logger.info(" Reading the job paraeters from file: " + args(1))
    logger.warn(" Reading the job paraeters from file: " + args(1))
    val sourceParaeters = scala.io.Source.fromFile(args(1)).getLines().filter(!_.isEmpty).map(line => line.split(":").map(_.trim)).flatMap(t => Map(t(0) -> t(1))).toMap
 
 
    //Recursive paraeter assignment function to identify all paraeters in hql and replace them with values provided in paraeter file.
    def paraAssignment(hql_location: String): String = {
 
      logger.info(" Reading the hql from file: " + hql_location)
      logger.warn(" Reading the hql from file: " + hql_location)
 
      val hql_txt: String = scala.io.Source.fromFile(hql_location).mkString
      
      logger.info(" Assigning paraeters for hql in file: " + hql_location)
      logger.warn(" Assigning paraeters for hql in file: " + hql_location)
 
      //Searching in finding all the variables in the hql_txt. The searchString identifies all words starting with $$.
      val searchString = "\\$\\$\\w*".
      val paraList = searchString.findAllIn(hql_txt).toList
      //To replace the paraeters, building the escape sequence required to handle $$
      val replaceStringPrefix = "\\$\\$"
 
      // Replacing paraeters with actual values based on provided paraeter file. Uses efficient tail-recursion.
      def replace_recursion(i: Int, acc: String, sourceParaeters: Map[String, String]): String = {
        if (i > paraList.length - 1) acc
        else {
          val paraKey = paraList(i).substring(2)
          val paraValue = sourceParaeters(paraKey)
          replace_recursion(i + 1, acc.replaceAll(replaceStringPrefix.concat(paraKey), paraValue), sourceParaeters)
        }
      }
 
      replace_recursion(0, hql_txt, sourceParaeters)
    }
 
    //Evaluating and executing the hql. Reads the location of hql and calls paraAssignment function to assign paraeters.
    //Post paraeter assignment, hql is evaluated and executed as required.
    def createTT(TempTableRequired: String, Cached: String, Broadcast: String, TempTableName: String, hql_txt: String) {
      if (TempTableRequired == "Y") {
        if (Cached == "Y") {
 
          logger.info(" Evaluating hql for cached temporary table: " + TempTableName)
          logger.warn(" Evaluating hql for cached temporary table: " + TempTableName)
 
          spark.sql(hql_txt).cache().createOrReplaceTempView(TempTableName)
 
          logger.info(" Completed evaluating hql for temporary table: " + TempTableName)
          logger.warn(" Completed evaluating hql for temporary table: " + TempTableName)
        }
        else {
 
          logger.info(" Evaluating hql for temporary table: " + TempTableName)
          logger.warn(" Evaluating hql for temporary table: " + TempTableName)
 
          spark.sql(hql_txt).createOrReplaceTempView(TempTableName)
 
          logger.info(" Completed evaluating hql for temporary table: " + TempTableName)
          logger.warn(" Completed evaluating hql for temporary table: " + TempTableName)
        }
        if (Broadcast == "Y") {
          sc.broadcast(TempTableName)
 
        }